use chrono::{DateTime, Duration, Local};
use std::fmt;

pub struct Project {
    pub id: u32,
    pub name: String,
    pub created: DateTime<Local>,
    pub updated: DateTime<Local>,
    pub total_duration: Option<Duration>,
}

impl Project {
    pub fn new(
        id: u32,
        name: String,
        created: DateTime<Local>,
        updated: DateTime<Local>,
        total_duration: Option<Duration>
    ) -> Self {
        Project {
            id, // id is generated by db
            name,
            created,
            updated,
            total_duration,
        }
    }
}

pub struct Log {
    pub id: Option<u32>,
    pub proj_id: u32,
    pub message: Option<String>,
    pub start: Option<DateTime<Local>>,
    pub end: Option<DateTime<Local>>,
    pub duration: Duration,
}

impl Log {
    pub fn new(
        id: Option<u32>,
        proj_id: u32,
        message: Option<String>,
        start: DateTime<Local>,
        end: DateTime<Local>,
        duration: Option<i64>,
    ) -> Self {
        let duration = match duration {
            Some(val) => Duration::seconds(val),
            None => Duration::seconds(end.timestamp() - start.timestamp()),
        };

        Log {
            id, // db-generated
            proj_id,
            message,
            start: Some(start),
            end: Some(end),
            duration,
        }
    }

    pub fn new_no_timestamp(
        id: Option<u32>,
        proj_id: u32,
        message: Option<String>,
        duration_mins: i64,
    ) -> Self {
        let duration = Duration::minutes(duration_mins);

        Log {
            id,
            proj_id,
            message,
            start: None,
            end: None,
            duration
        }
    }

    pub fn maybe_get_start_timestamp(&self) -> Option<i64> {
        self.start.map(|t| t.timestamp())
    }

    pub fn maybe_get_end_timestamp(&self) -> Option<i64> {
        self.end.map(|t| t.timestamp())
    }
}

impl fmt::Display for Log {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(
            f,
            "Id: {}, Description: {}, Start: {}, End: {}, Duration: {}",
            self.id, self.description, self.start, self.end, self.duration
        )
    }
}
