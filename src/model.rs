use chrono::{DateTime, Duration, Local};
use std::fmt;

pub struct Project {
    pub id: i64,
    pub name: String,
    pub created: DateTime<Local>,
    pub updated: DateTime<Local>,
}

impl Project {
    pub fn new(
        id: i64,
        name: String,
        created: DateTime<Local>,
        updated: DateTime<Local>,
    ) -> Project {
        Project {
            id, // id is generated by db
            name,
            created,
            updated,
        }
    }
}

impl std::fmt::Display for Project {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "Id: {}, Name: {}. Created: {}, Updated: {}",
            self.id, self.name, self.created, self.updated
        )
    }
}

pub struct Log {
    pub id: i64,
    pub description: String,
    pub start: DateTime<Local>,
    pub end: DateTime<Local>,
    pub duration: Duration,
}

impl Log {
    pub fn new(id: i64, description: String, start: DateTime<Local>, end: DateTime<Local>) -> Self {
        Log {
            id, // db-generated
            description,
            start,
            end,
            duration: end - start,
        }
    }
}

impl fmt::Display for Log {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(
            f,
            "Id: {}, Descrip: {}, Start: {}, End: {}, Duration: {}",
            self.id, self.description, self.start, self.end, self.duration
        )
    }
}
