use chrono::{DateTime, Local};

use crate::repository::{self};

pub struct Project {
    pub id: i64,
    pub name: String,
    pub created: DateTime<Local>,
    pub updated: DateTime<Local>,
}

impl Project {
    pub fn new(
        id: i64,
        name: String,
        created: DateTime<Local>,
        updated: DateTime<Local>,
    ) -> Project {
        Project {
            id, // id is generated by db
            name: name,
            created,
            updated,
        }
    }
}

impl std::fmt::Display for Project {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}: {}", self.id, self.name)
    }
}

pub fn add(name: String) {
    let mut new_proj = Project::new(0, name, Local::now(), Local::now());
    new_proj.id = repository::save_project(&new_proj);

    println!("Created project {}", new_proj);
}

pub fn list() {
    // get all projects from the db
    let projs = repository::get_projects().expect("Error retrieving projects");
    // foreach print
    for proj in &projs {
        println!("{}", proj);
    }
}
