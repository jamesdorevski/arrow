use chrono::{Local, DateTime};

use crate::repository::{*, self};

pub struct Project {
    pub id: i64,
    pub name: String,
    pub created: DateTime<Local>,
    pub updated: DateTime<Local>,
}

impl Project {
    pub fn new(name: &str) -> Project {
        Project {
            id: 0, // id is generated by db
            name: name.to_string(),
            created: Local::now(),
            updated: Local::now(),
        }
    }
}

impl std::fmt::Display for Project {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}: {}", self.id, self.name)
    }
}

pub fn add(name: &str) {
    let mut new_proj = Project::new(name);
    new_proj.id = repository::save_project(&new_proj);
 
    println!("Created project {}", new_proj);
}


